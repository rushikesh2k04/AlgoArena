#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 8
    bytecblock "owner_addr"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/algo_arena/contract.py:15
    // self.owner = GlobalState(Address(), key="owner_addr")
    bytec_0 // "owner_addr"
    global ZeroAddress
    app_global_put

main_after_if_else@2:
    // smart_contracts/algo_arena/contract.py:5
    // class AlgoArenaReward(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x4c5c61ba 0x6a296ee2 // method "create()void", method "reward_user(address,uint64,uint64)void"
    txna ApplicationArgs 0
    match create reward_user
    err

main___algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// smart_contracts.algo_arena.contract.AlgoArenaReward.create[routing]() -> void:
create:
    // smart_contracts/algo_arena/contract.py:20
    // self.owner.value = Address(Txn.sender)
    bytec_0 // "owner_addr"
    txn Sender
    app_global_put
    // smart_contracts/algo_arena/contract.py:17
    // @abimethod()
    intc_0 // 1
    return


// smart_contracts.algo_arena.contract.AlgoArenaReward.reward_user[routing]() -> void:
reward_user:
    // smart_contracts/algo_arena/contract.py:22
    // @abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/algo_arena/contract.py:30
    // assert Txn.sender == self.owner.value, "Only the AlgoArena owner/server can issue rewards."
    intc_1 // 0
    bytec_0 // "owner_addr"
    app_global_get_ex
    assert // check self.owner exists
    txn Sender
    ==
    assert // Only the AlgoArena owner/server can issue rewards.
    // smart_contracts/algo_arena/contract.py:32-36
    // itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=recipient_address.native,
    //     amount=algo_reward_amount.native
    // ).submit()
    itxn_begin
    // smart_contracts/algo_arena/contract.py:33
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/algo_arena/contract.py:35
    // amount=algo_reward_amount.native
    uncover 2
    btoi
    itxn_field Amount
    dig 2
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/algo_arena/contract.py:32
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/algo_arena/contract.py:32-36
    // itxn.Payment(
    //     sender=Global.current_application_address,
    //     receiver=recipient_address.native,
    //     amount=algo_reward_amount.native
    // ).submit()
    itxn_submit
    // smart_contracts/algo_arena/contract.py:38-43
    // itxn.AssetTransfer(
    //     sender=Global.current_application_address,
    //     asset_receiver=recipient_address.native,
    //     xfer_asset=nft_asset_id.native,
    //     asset_amount=NativeUInt64(1)
    // ).submit()
    itxn_begin
    // smart_contracts/algo_arena/contract.py:39
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/algo_arena/contract.py:41
    // xfer_asset=nft_asset_id.native,
    swap
    btoi
    // smart_contracts/algo_arena/contract.py:42
    // asset_amount=NativeUInt64(1)
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field Sender
    itxn_field AssetReceiver
    // smart_contracts/algo_arena/contract.py:38
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/algo_arena/contract.py:38-43
    // itxn.AssetTransfer(
    //     sender=Global.current_application_address,
    //     asset_receiver=recipient_address.native,
    //     xfer_asset=nft_asset_id.native,
    //     asset_amount=NativeUInt64(1)
    // ).submit()
    itxn_submit
    // smart_contracts/algo_arena/contract.py:22
    // @abimethod()
    intc_0 // 1
    return
